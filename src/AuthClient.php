<?php

declare(strict_types=1);

/*
 * AuthLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace AuthLib;

use AuthLib\Controllers;

/**
 * AuthLib client class
 */
class AuthClient implements ConfigurationInterface
{
    private $client;

    private $timeout = ConfigurationDefaults::TIMEOUT;
    private $authorization = ConfigurationDefaults::AUTHORIZATION;
    private $environment = ConfigurationDefaults::ENVIRONMENT;
    private $authManagers = [];
    private $httpCallback;

    public function __construct(array $configOptions = null)
    {
        if (isset($configOptions['timeout'])) {
            $this->timeout = $configOptions['timeout'];
        }
        if (isset($configOptions['authorization'])) {
            $this->authorization = $configOptions['authorization'];
        }
        if (isset($configOptions['environment'])) {
            $this->environment = $configOptions['environment'];
        }
        if (isset($configOptions['httpCallback'])) {
            $this->httpCallback = $configOptions['httpCallback'];
        }
    }

    /**
     * Get the client configuration as an associative array
     */
    public function getConfiguration(): array
    {
        $configMap = [];

        if (isset($this->timeout)) {
            $configMap['timeout'] = $this->timeout;
        }
        if (isset($this->authorization)) {
            $configMap['authorization'] = $this->authorization;
        }
        if (isset($this->environment)) {
            $configMap['environment'] = $this->environment;
        }
        if (isset($this->httpCallback)) {
            $configMap['httpCallback'] = $this->httpCallback;
        }

        return $configMap;
    }

    /**
     * Clone this client and override given configuration options
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function getAuthorization(): string
    {
        return $this->authorization;
    }

    public function getEnvironment(): string
    {
        return $this->environment;
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return static::ENVIRONMENT_MAP[$this->environment][$server];
    }

    /**
     * Returns API Controller
     */
    public function getAPIController(): Controllers\APIController
    {
        if ($this->client == null) {
            $this->client = new Controllers\APIController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->client;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'http://51.79.158.202/ion-meter-bh/public/api',
        ],
    ];
}
